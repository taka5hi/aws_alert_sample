AWSTemplateFormatVersion: "2010-09-09"
Description: Import test

Parameters:
  ImageTag:
    Type: String
    Default: latest
    Description: docker image tag.
  SlackWebHookUrl:
    Type: String
    Description: slack webhook url.
  EcrStackName:
    Type: String
    Description: ecr stack name.

Resources:
  # sunscription filter for lambda
  LogsSubscriptionFilter:
    Type: "AWS::Logs::SubscriptionFilter"
    DeletionPolicy: Delete
    Properties:
      LogGroupName: /aws/lambda/lambda-for-test
      FilterPattern: "ERROR"
      DestinationArn: !GetAtt PublishToSNSLambdaFunction.Arn

  # publish to sns function
  PublishToSNSLambdaFunction:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: Delete
    Properties:
      Description: ""
      FunctionName: "publish-to-sns"
      Code:
        ImageUri: !Sub
          - "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}:${ImageTag}"
          - ImageName: Fn::ImportValue
            !Sub "${EcrStackName}-PublishToSNSECRRepositoryName"
      PackageType: Image
      MemorySize: 128
      Role: !GetAtt PublishToSNSIAMRole.Arn
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

  # permission for subscribe cloudwatch logs
  Permission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    Properties:
      FunctionName: !GetAtt PublishToSNSLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"

  # SNS Topic
  SNSTopic:
    Type: "AWS::SNS::Topic"
    DeletionPolicy: Delete
    Properties:
      DisplayName: ""
      TopicName: "alert-notification"

  # SNS Subscription
  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    DeletionPolicy: Delete
    Properties:
      Endpoint: !GetAtt SendToSlackLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SNSTopic

  # permission for subscribe sns
  Permission2:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    Properties:
      FunctionName: !GetAtt SendToSlackLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic

  # send to slack function
  SendToSlackLambdaFunction:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: Delete
    Properties:
      Description: ""
      FunctionName: "send-to-slack"
      Code:
        ImageUri: !Sub
          - "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}:${ImageTag}"
          - ImageName: Fn::ImportValue
            !Sub "${EcrStackName}-SendToSlackECRRepositoryName"
      PackageType: Image
      MemorySize: 128
      Role: !GetAtt SendToSlackIAMRole.Arn
      Timeout: 3
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebHookUrl

  # IAM role for lambda
  PublishToSNSIAMRole:
    Type: "AWS::IAM::Role"
    DeletionPolicy: Delete
    Properties:
      Path: "/service-role/"
      RoleName: "publish-to-sns-lambda-role"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref PublishToSNSIAMManagedPolicy
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  SendToSlackIAMRole:
    Type: "AWS::IAM::Role"
    DeletionPolicy: Delete
    Properties:
      Path: "/service-role/"
      RoleName: "send-to-slack-lambda-role"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref SendToSlackIAMManagedPolicy
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  PublishToSNSIAMManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: Delete
    Properties:
      ManagedPolicyName: "publish-to-sns-lambda-policy"
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "logs:CreateLogGroup",
                    "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Resource": [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/publish-to-sns:*"
                    ]
                }
            ]
        }

  SendToSlackIAMManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: Delete
    Properties:
      ManagedPolicyName: "send-to-slack-lambda-policy"
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": "logs:CreateLogGroup",
                    "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Resource": [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/send-to-slack:*"
                    ]
                }
            ]
        }
